package main

import (
	"bufio"
	"io"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"text/template"
)

func createScriptFile(script string) (string, error) {
	dir, err := ioutil.TempDir("", "goscript")
	if err != nil {
		return "", err
	}
	f, err := os.Create(filepath.Join(dir, "goscript.go"))
	if err != nil {
		return "", err
	}
	data := struct {
		Script string
	}{
		Script: script,
	}
	if err := scriptTemplate.Execute(f, data); err != nil {
		return "", err
	}
	if err := f.Close(); err != nil {
		return "", err
	}
	return f.Name(), nil
}

var scriptTemplate *template.Template
var scriptTemplateErr error

func Exec(script string) (string, error) {
	scriptTemplate, scriptTemplateErr = template.New("goscript").Parse(scriptTemp)
	if scriptTemplateErr != nil {
		return "", scriptTemplateErr
	}
	name, err := createScriptFile(script)
	defer func() {
		_ = os.Remove(name)
	}()
	if err != nil {
		return "", err
	}
	cmd := exec.Command("go", "run", name)
	stdout, err := cmd.StdoutPipe()

	if err != nil {
		return "", err
	}

	_ = cmd.Start()

	reader := bufio.NewReader(stdout)

	var a = ""

	//实时循环读取输出流中的一行内容
	for {
		line, err2 := reader.ReadString('\n')
		if err2 != nil || io.EOF == err2 {
			break
		}
		a += line
	}

	_ = cmd.Wait()
	return a, nil
}

var scriptTemp = `// Code generated by goscript; DO NOT EDIT
// github.com/chenhg5/goscript
package main

import (
	"fmt"
)

func main() {
	{{.Script}}
}
`
